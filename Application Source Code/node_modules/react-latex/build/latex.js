"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _katex = require("katex");

var _katex2 = _interopRequireDefault(_katex);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* eslint-disable eslint-plugin-import */

// Eslint doesn't like react being in peerDependencies
//eslint-disable-line


var latexify = function latexify(string, options) {
    var regularExpression = /\$\$[\s\S]+?\$\$|\\\[[\s\S]+?\\\]|\\\([\s\S]+?\\\)|\$[^\$\\]*(?:\\.[^\$\\]*)*\$/g;
    var blockRegularExpression = /\$\$[\s\S]+?\$\$|\\\[[\s\S]+?\\\]/g;

    var stripDollars = function stripDollars(stringToStrip) {
        return stringToStrip[0] === "$" && stringToStrip[1] !== "$" ? stringToStrip.slice(1, -1) : stringToStrip.slice(2, -2);
    };

    var getDisplay = function getDisplay(stringToDisplay) {
        return stringToDisplay.match(blockRegularExpression) ? "block" : "inline";
    };

    var renderLatexString = function renderLatexString(s, t) {
        var renderedString = void 0;
        try {
            // returns HTML markup
            renderedString = _katex2.default.renderToString(s, t === "block" ? Object.assign({ displayMode: true }, options) : options);
        } catch (err) {
            console.error("couldn`t convert string", s);
            return s;
        }
        return renderedString;
    };

    var result = [];

    var latexMatch = string.match(regularExpression);
    var stringWithoutLatex = string.split(regularExpression);

    if (latexMatch) {
        stringWithoutLatex.forEach(function (s, index) {
            result.push({
                string: s,
                type: "text"
            });
            if (latexMatch[index]) {
                result.push({
                    string: stripDollars(latexMatch[index]),
                    type: getDisplay(latexMatch[index])
                });
            }
        });
    } else {
        result.push({
            string: string,
            type: "text"
        });
    }

    var processResult = function processResult(resultToProcess) {
        var newResult = resultToProcess.map(function (r) {
            if (r.type === "text") {
                return r.string;
            }
            return _react2.default.createElement("span", { dangerouslySetInnerHTML: { __html: renderLatexString(r.string, r.type) } });
        });

        return newResult;
    };

    // Returns list of spans with latex and non-latex strings.
    return processResult(result);
};

var Latex = function (_React$Component) {
    _inherits(Latex, _React$Component);

    function Latex() {
        _classCallCheck(this, Latex);

        return _possibleConstructorReturn(this, (Latex.__proto__ || Object.getPrototypeOf(Latex)).apply(this, arguments));
    }

    _createClass(Latex, [{
        key: "render",
        value: function render() {
            var _props = this.props,
                children = _props.children,
                displayMode = _props.displayMode,
                leqno = _props.leqno,
                fleqn = _props.fleqn,
                throwOnError = _props.throwOnError,
                errorColor = _props.errorColor,
                macros = _props.macros,
                minRuleThickness = _props.minRuleThickness,
                colorIsTextColor = _props.colorIsTextColor,
                maxSize = _props.maxSize,
                maxExpand = _props.maxExpand,
                strict = _props.strict,
                trust = _props.trust;


            var renderUs = latexify(children, { displayMode: displayMode,
                leqno: leqno,
                fleqn: fleqn,
                throwOnError: throwOnError,
                errorColor: errorColor,
                macros: macros,
                minRuleThickness: minRuleThickness,
                colorIsTextColor: colorIsTextColor,
                maxSize: maxSize,
                maxExpand: maxExpand,
                strict: strict,
                trust: trust });
            renderUs.unshift(null);
            renderUs.unshift('span'); //put everything in a span
            // spread renderUs out to children args
            return _react2.default.createElement.apply(null, renderUs);
        }
    }]);

    return Latex;
}(_react2.default.Component);

Latex.propTypes = {
    children: _propTypes2.default.string,
    displayMode: _propTypes2.default.bool,
    leqno: _propTypes2.default.bool,
    fleqn: _propTypes2.default.bool,
    throwOnError: _propTypes2.default.bool,
    errorColor: _propTypes2.default.string,
    macros: _propTypes2.default.object,
    minRuleThickness: _propTypes2.default.number,
    colorIsTextColor: _propTypes2.default.bool,
    maxSize: _propTypes2.default.number,
    maxExpand: _propTypes2.default.number,
    strict: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string, _propTypes2.default.func]),
    trust: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func])
};
Latex.defaultProps = {
    children: "",
    displayMode: false,
    output: "htmlAndMathml",
    leqno: false,
    fleqn: false,
    throwOnError: true,
    errorColor: "#cc0000",
    macros: {},
    minRuleThickness: 0,
    colorIsTextColor: false,
    strict: "warn",
    trust: false
};


if (module && module.exports) {
    module.exports = Latex;
} else {
    window.Latex = Latex;
}
